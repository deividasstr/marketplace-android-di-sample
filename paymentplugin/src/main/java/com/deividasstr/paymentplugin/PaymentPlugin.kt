package com.deividasstr.paymentplugin

import android.view.View
import com.deividasstr.base.FragmentScope
import com.deividasstr.base.SingleIn
import com.deividasstr.plugin.Plugin
import com.deividasstr.plugin.PluginType
import com.deividasstr.plugin.capabilities.PluginCapability
import com.deividasstr.plugin.capabilities.progress.ProgressCapability
import com.deividasstr.plugin.capabilities.progress.ProgressConsumer
import com.deividasstr.plugin.capabilities.statechange.HostStateChangeCapability
import com.deividasstr.plugin.capabilities.statechange.StateChangeConsumer
import com.deividasstr.plugin.capabilities.stateprovision.PluginStateCapability
import com.deividasstr.plugin.capabilities.stateprovision.PluginStateProvider
import com.deividasstr.plugin.capabilities.ui.PluginViewCapability
import com.deividasstr.plugin.capabilities.validation.ValidatableCapability
import com.deividasstr.plugin.capabilities.validation.ValidityConsumer
import com.deividasstr.plugin.plugindata.PaymentPluginData
import com.squareup.anvil.annotations.ContributesBinding
import com.squareup.anvil.annotations.ContributesMultibinding
import javax.inject.Inject

//@CheckoutPlugin
abstract class PaymentPlugin : Plugin {
    override val pluginType: PluginType = PluginType.PAYMENT
    override val capabilities: List<PluginCapability> = listOf(
        PluginStateCapability(initialPluginData = PaymentPluginData("")),
        ProgressCapability(),
        ValidatableCapability(),
        HostStateChangeCapability<PaymentHostStateChange>(),
        PluginViewCapability { context -> PaymentPluginView(context) },
    )
}

// To be generated by @CheckoutPlugin
@SingleIn(FragmentScope::class)
@ContributesBinding(FragmentScope::class, boundType = PaymentPlugin::class)
@ContributesMultibinding(FragmentScope::class, boundType = Plugin::class)
class PaymentPluginImpl @Inject constructor() : PaymentPlugin()

// To be generated by @CheckoutPlugin
class PaymentPluginContext @Inject constructor(plugin: PaymentPlugin) :
    PluginStateProvider<PaymentPluginData> by (plugin.capabilities.find { it is PluginStateProvider<*> } as PluginStateProvider<PaymentPluginData>),
    StateChangeConsumer<PaymentHostStateChange> by (plugin.capabilities.find { it is StateChangeConsumer<*> } as StateChangeConsumer<PaymentHostStateChange>),
    ValidityConsumer by (plugin.capabilities.find { it is ValidityConsumer } as ValidityConsumer),
    ProgressConsumer by (plugin.capabilities.find { it is ProgressConsumer } as ProgressConsumer)

